@use 'sass:math';
@use '$lib/styling/breakpoints' with (
	$classes: (
		small medium large xlarge xxlarge
	),
	$breakpoints: (
		small: 0px,
		medium: 768px,
		large: 1024px,
		xlarge: 1300px,
		xxlarge: 1720px
	)
);
@use '$lib/styling/typography';
@use '$lib/styling/colors';

@import url('https://fonts.googleapis.com/css2?family=Bodoni+Moda+SC:ital,opsz,wght@0,6..96,400..900;1,6..96,400..900&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap');

*,
*::before,
*::after {
	box-sizing: border-box;
}

body {
	margin: 0;
	scroll-behavior: smooth;
	text-rendering: optimizeSpeed;
	font-family: sans-serif;
	font-size: 1rem;
	color: #222222;
	background-color: #fff;
	font-family: 'Lato', sans-serif;

	font-weight: 300;
}

img {
	max-width: 100%;
	max-height: 100%;
	height: 100%;
	object-fit: cover;
	// width: 100%;
}

// grid system

$bleed: (
	small: 30px,
	medium: 64px,
	large: 3vw //large: 2.0834vw
);

$columns: 18;
$gutters: (
	small: 10px,
	medium: 20px,
	large: 2vw
);

:root {
	@each $breakpoint, $gutter in $gutters {
		@include breakpoints.breakpoint($breakpoint) {
			--gutter: #{$gutter};
		}
	}

	@each $breakpoint, $b in $bleed {
		@include breakpoints.breakpoint($breakpoint) {
			& {
				--bleed: #{$b};
				--bleed-negative: #{-$b};
			}
		}
	}
}

// Grid
.container {
	margin: auto;
	max-width: 1200px;
	padding-left: var(--bleed);
	padding-right: var(--bleed);

	&--negative {
		margin-left: var(--bleed-negative);
		margin-right: var(--bleed-negative);
	}
}

.grid {
	display: grid;
	grid-template-columns: repeat($columns, minmax(0, 1fr));
	gap: var(--gutter);
	// padding-bottom: 0.5em;
	// align-items: baseline;

	> .cell {
		grid-column: span #{$columns} / span #{$columns};
	}

	// Auto width
	@include breakpoints.eachBreakpoint() using ($size) {
		@for $i from 1 through $columns {
			> .#{$size}-span-#{$i} {
				grid-column: span #{$i} / span #{$i};
			}
		}
		@for $i from 1 through $columns {
			> .#{$size}-start-#{$i} {
				grid-column-start: #{$i};
			}
			> .#{$size}-end-#{$i} {
				grid-column-end: #{$i};
			}
		}
	}
}

section {
	max-width: 100%;
	padding-bottom: 4em;
	padding-top: 4em;
	border-bottom: rgb(228, 228, 228) solid 1px;

	@include breakpoints.breakpoint(medium) {
		padding-bottom: 8em;
		padding-top: 8em;
	}
}

//buttons

button,
.btn {
	background-color: colors.$primary;
	color: #fff;
	padding: 1.2em;
	border-radius: 20px;
	font-size: 1em;
	cursor: pointer;
	margin: 2em auto;
	display: block;
	max-width: 300px;
}

button:focus,
button:hover,
.btn:hover {
	background: mix(#fff, colors.$primary, 10%);
}

button:active {
	transform: scale(1);
}

.flex {
	display: flex;
	flex-direction: column;
	gap: 3em;
	@include breakpoints.breakpoint(medium) {
		flex-direction: row;
		justify-content: space-between;
		// justify-content: center;
	}

	div {
		flex: 1;
		// max-width: min(350px, 100%);
		// margin: auto;
	}
}

@mixin horizontalScroll() {
	--columns: 1;
	display: grid;
	grid-auto-flow: column;
	align-items: flex-start;
	grid-auto-columns: calc(
		(100vw - (var(--gutter) * (var(--columns) - 1)) - (var(--bleed) * 2)) / var(--columns)
	);

	gap: var(--gutter);
	padding-left: var(--bleed);
	padding-right: var(--bleed);

	&.grid {
		// Reset GRID
		grid-template-columns: unset !important;
		> * {
			grid-column: unset !important;
		}

		// .cell {
		// 	height: 100%;
		// }
	}

	@include breakpoints.breakpoint(medium) {
		--columns: 2;

		grid-auto-flow: unset; // Stop auto-flowing in a horizontal direction
		grid-template-columns: repeat(var(--columns), 1fr); // Define explicit grid columns
		grid-auto-columns: unset; // Remove the auto-columns
		overflow-x: unset; // Disable horizontal scrolling
		align-items: flex-start;
	}

	@include breakpoints.breakpoint(large) {
		--columns: 3;
	}
	@include breakpoints.breakpoint(xxlarge) {
		--columns: 4;
	}
}

.horizontal-scroll {
	@include horizontalScroll;
}

// .horizontal-scroll-until-medium {
// 	@include breakpoints.mq(medium) {
// 		@include horizontalScroll();
// 	}
// }

// .horizontal-scroll-until-large {
// 	@include breakpoints.mq(large) {
// 		@include horizontalScroll();
// 	}
// }
